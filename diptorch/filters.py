# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/00_filters.ipynb.

# %% auto 0
__all__ = ['gaussian_filter', 'hessian', 'hessian_eigenvalues']

# %% ../notebooks/00_filters.ipynb 3
from math import ceil, sqrt
from typing import Callable

import torch
import torch.nn.functional as F

# %% ../notebooks/00_filters.ipynb 5
def gaussian_filter(
    img: torch.Tensor,  # The input tensor
    sigma: float,  # Standard deviation for the Gaussian kernel
    order: int | list = 0,  # The order of the filter's derivative along each dim
    mode: str = "reflect",  # Padding mode for `torch.nn.functional.pad`
    truncate: float = 4.0,  # Number of standard deviations to sample the filter
) -> torch.Tensor:
    """
    Convolves an image with a Gaussian kernel (or its derivatives).

    Inspired by the API of `scipy.ndimage.gaussian_filter` and the
    implementation of `diplib.Gauss`.
    """

    # Specify the dimensions of the convolution to use
    ndim = img.ndim - 2
    if isinstance(order, int):
        order = [order] * ndim
    else:
        assert len(order) == ndim, "Specify the Gaussian derivative order for each dim"
    convfn = getattr(F, f"conv{ndim}d")

    # Convolve along the rows, columns, and depth (optional)
    for dim, derivative_order in enumerate(order):
        img = _conv(img, convfn, sigma, derivative_order, truncate, mode, dim)
    return img

# %% ../notebooks/00_filters.ipynb 6
def _gaussian_kernel_1d(
    sigma: float, order: int, truncate: float, dtype: torch.dtype, device: torch.device
) -> torch.Tensor:
    # Set the size of the kernel according to the sigma
    radius = ceil(sigma * truncate)
    x = torch.arange(-radius, radius + 1, dtype=dtype, device=device)

    # Initialize the zeroth-order Gaussian kernel
    var = sigma**2
    g = (-x.pow(2) / (2 * var)).exp() / (sqrt(2 * torch.pi) * sigma)

    # Optionally convert to a higher-order kernel
    if order == 0:
        return g
    elif order == 1:
        g1 = g * (-x / var)
        g1 -= g1.mean()
        g1 /= (g1 * x).sum() / -1  # Normalize the filter's impulse response to -1
        return g1
    elif order == 2:
        g2 = g * (x.pow(2) / var - 1) / var
        g2 -= g2.mean()
        g2 /= (g2 * x.pow(2)).sum() / 2  # Normalize the filter's impulse response to 2
        return g2
    else:
        raise NotImplementedError(f"Only supports order in [0, 1, 2], not {order}")


def _conv(
    img: torch.Tensor,
    convfn: Callable,
    sigma: float,
    order: int,
    truncate: float,
    mode: str,
    dim: int,
):
    # Make a 1D kernel and pad such that the image size remains the same
    kernel = _gaussian_kernel_1d(sigma, order, truncate, img.dtype, img.device)
    padding = len(kernel) // 2

    # Specify the padding dimensions
    pad = [0] * 2 * (img.ndim - 2)
    for idx in range(2 * dim, 2 * dim + 2):
        pad[idx] = padding
    pad = pad[::-1]
    x = F.pad(img, pad, mode=mode)

    # Specify the dimension along which to do the convolution
    view = [1] * img.ndim
    view[dim + 2] *= -1

    return convfn(x, weight=kernel.view(*view))

# %% ../notebooks/00_filters.ipynb 8
from .linalg import eigvalsh2, eigvalsh3


def hessian(
    img: torch.Tensor, sigma: float, as_matrix: bool = False, **kwargs
) -> torch.Tensor:
    """Compute the Hessian of a 2D or 3D image."""
    if img.ndim == 4:
        hessian = _hessian_2d(img, sigma, **kwargs)
    elif img.ndim == 5:
        hessian = _hessian_3d(img, sigma, **kwargs)
    else:
        raise ValueError(f"img can only be 2D or 3D, not {img.ndim-2}D")

    if as_matrix:
        return _hessian_as_matrix(*hessian)
    else:
        return hessian


def hessian_eigenvalues(img: torch.Tensor, sigma: float, **kwargs):
    H = hessian(img, sigma, **kwargs)
    if len(H) == 3:
        return eigvalsh2(*H)
    elif len(H) == 6:
        return eigvalsh3(*H)
    else:
        raise ValueError(f"Unrecognized number of upper triangular elements: {len(H)}")

# %% ../notebooks/00_filters.ipynb 9
def _hessian_2d(img: torch.Tensor, sigma: float, **kwargs):
    xx = gaussian_filter(img, sigma, order=[0, 2], **kwargs)
    yy = gaussian_filter(img, sigma, order=[2, 0], **kwargs)
    xy = gaussian_filter(img, sigma, order=[1, 1], **kwargs)
    return xx, xy, yy


def _hessian_3d(img: torch.Tensor, sigma: float, **kwargs):
    xx = gaussian_filter(img, sigma, order=[0, 0, 2], **kwargs)
    yy = gaussian_filter(img, sigma, order=[0, 2, 0], **kwargs)
    zz = gaussian_filter(img, sigma, order=[2, 0, 0], **kwargs)
    xy = gaussian_filter(img, sigma, order=[0, 1, 1], **kwargs)
    xz = gaussian_filter(img, sigma, order=[1, 0, 1], **kwargs)
    yz = gaussian_filter(img, sigma, order=[1, 1, 0], **kwargs)
    return xx, xy, xz, yy, yz, zz


def _hessian_as_matrix(*args):
    if len(args) == 3:
        xx, xy, yy = args
        return torch.stack(
            [
                torch.concat([xx, xy], dim=1),
                torch.concat([xy, yy], dim=1),
            ],
            dim=1,
        )
    elif len(args) == 6:
        xx, xy, xz, yy, yz, zz = args
        return torch.stack(
            [
                torch.concat([xx, xy, xz], dim=1),
                torch.concat([xy, yy, yz], dim=1),
                torch.concat([xz, yz, zz], dim=1),
            ],
            dim=1,
        )
    else:
        raise ValueError(f"Invalid number of arguments: {len(args)}")
